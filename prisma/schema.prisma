generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model docs {
  id              Int          @id @default(autoincrement())
  side_submenu_id Int
  title           String       @db.VarChar(255)
  description     String       @db.Text
  display_code    String       @db.Text
  side_submenu    side_submenu @relation(fields: [side_submenu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "docs_ibfk_1")
  favorites       favorites[]

  @@index([side_submenu_id], map: "side_submenu_id")
}

model notice {
  id          Int       @id @default(autoincrement())
  title       String    @db.VarChar(255)
  content     String    @db.Text
  create_date DateTime? @default(now()) @db.Timestamp(0)
}

model side_menu {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  description  String         @db.Text
  link         String         @db.VarChar(255)
  side_submenu side_submenu[]
}

model side_submenu {
  id           Int       @id @default(autoincrement())
  side_menu_id Int
  name         String    @db.VarChar(255)
  description  String    @db.Text
  link         String    @db.VarChar(255)
  docs         docs[]
  side_menu    side_menu @relation(fields: [side_menu_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "side_submenu_ibfk_1")

  @@index([side_menu_id], map: "side_menu_id")
}

model User {
  id            String      @id @default(uuid())
  name          String
  email         String?     @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  accounts      Account[]
  favorites     favorites[]
  sessions      Session[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model favorites {
  user_id String
  docs_id Int
  users   User   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorites_ibfk_1")
  docs    docs   @relation(fields: [docs_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "favorites_ibfk_2")

  @@id([user_id, docs_id])
  @@index([docs_id], map: "docs_id")
}
